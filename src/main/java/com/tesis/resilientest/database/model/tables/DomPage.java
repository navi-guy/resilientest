/*
 * This file is generated by jOOQ.
 */
package com.tesis.resilientest.database.model.tables;


import com.tesis.resilientest.database.model.DefaultSchema;
import com.tesis.resilientest.database.model.Keys;
import com.tesis.resilientest.database.model.tables.WebElement.WebElementPath;
import com.tesis.resilientest.database.model.tables.records.DomPageRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DomPage extends TableImpl<DomPageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>dom_page</code>
     */
    public static final DomPage DOM_PAGE = new DomPage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DomPageRecord> getRecordType() {
        return DomPageRecord.class;
    }

    /**
     * The column <code>dom_page.id</code>.
     */
    public final TableField<DomPageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>dom_page.url</code>.
     */
    public final TableField<DomPageRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>dom_page.description</code>.
     */
    public final TableField<DomPageRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>dom_page.screen_height</code>.
     */
    public final TableField<DomPageRecord, Integer> SCREEN_HEIGHT = createField(DSL.name("screen_height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dom_page.screen_width</code>.
     */
    public final TableField<DomPageRecord, Integer> SCREEN_WIDTH = createField(DSL.name("screen_width"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dom_page.viewport_height</code>.
     */
    public final TableField<DomPageRecord, Integer> VIEWPORT_HEIGHT = createField(DSL.name("viewport_height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dom_page.viewport_width</code>.
     */
    public final TableField<DomPageRecord, Integer> VIEWPORT_WIDTH = createField(DSL.name("viewport_width"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>dom_page.full_page_screenshot_path</code>.
     */
    public final TableField<DomPageRecord, String> FULL_PAGE_SCREENSHOT_PATH = createField(DSL.name("full_page_screenshot_path"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>dom_page.content</code>.
     */
    public final TableField<DomPageRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    private DomPage(Name alias, Table<DomPageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DomPage(Name alias, Table<DomPageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>dom_page</code> table reference
     */
    public DomPage(String alias) {
        this(DSL.name(alias), DOM_PAGE);
    }

    /**
     * Create an aliased <code>dom_page</code> table reference
     */
    public DomPage(Name alias) {
        this(alias, DOM_PAGE);
    }

    /**
     * Create a <code>dom_page</code> table reference
     */
    public DomPage() {
        this(DSL.name("dom_page"), null);
    }

    public <O extends Record> DomPage(Table<O> path, ForeignKey<O, DomPageRecord> childPath, InverseForeignKey<O, DomPageRecord> parentPath) {
        super(path, childPath, parentPath, DOM_PAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DomPagePath extends DomPage implements Path<DomPageRecord> {
        public <O extends Record> DomPagePath(Table<O> path, ForeignKey<O, DomPageRecord> childPath, InverseForeignKey<O, DomPageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DomPagePath(Name alias, Table<DomPageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DomPagePath as(String alias) {
            return new DomPagePath(DSL.name(alias), this);
        }

        @Override
        public DomPagePath as(Name alias) {
            return new DomPagePath(alias, this);
        }

        @Override
        public DomPagePath as(Table<?> alias) {
            return new DomPagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DomPageRecord> getPrimaryKey() {
        return Keys.DOM_PAGE__PK_DOM_PAGE;
    }

    private transient WebElementPath _webElement;

    /**
     * Get the implicit to-many join path to the <code>web_element</code> table
     */
    public WebElementPath webElement() {
        if (_webElement == null)
            _webElement = new WebElementPath(this, null, Keys.WEB_ELEMENT__FK_WEB_ELEMENT_PK_DOM_PAGE.getInverseKey());

        return _webElement;
    }

    @Override
    public DomPage as(String alias) {
        return new DomPage(DSL.name(alias), this);
    }

    @Override
    public DomPage as(Name alias) {
        return new DomPage(alias, this);
    }

    @Override
    public DomPage as(Table<?> alias) {
        return new DomPage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DomPage rename(String name) {
        return new DomPage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DomPage rename(Name name) {
        return new DomPage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DomPage rename(Table<?> name) {
        return new DomPage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomPage where(Condition condition) {
        return new DomPage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomPage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomPage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomPage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomPage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomPage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomPage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DomPage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomPage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DomPage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
