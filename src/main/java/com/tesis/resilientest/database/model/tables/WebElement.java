/*
 * This file is generated by jOOQ.
 */
package com.tesis.resilientest.database.model.tables;


import com.tesis.resilientest.database.model.DefaultSchema;
import com.tesis.resilientest.database.model.Keys;
import com.tesis.resilientest.database.model.tables.DomPage.DomPagePath;
import com.tesis.resilientest.database.model.tables.records.WebElementRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WebElement extends TableImpl<WebElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>web_element</code>
     */
    public static final WebElement WEB_ELEMENT = new WebElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebElementRecord> getRecordType() {
        return WebElementRecord.class;
    }

    /**
     * The column <code>web_element.id</code>.
     */
    public final TableField<WebElementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>web_element.id_attribute</code>.
     */
    public final TableField<WebElementRecord, String> ID_ATTRIBUTE = createField(DSL.name("id_attribute"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.class_name</code>.
     */
    public final TableField<WebElementRecord, String> CLASS_NAME = createField(DSL.name("class_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.tag</code>.
     */
    public final TableField<WebElementRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>web_element.name</code>.
     */
    public final TableField<WebElementRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.href</code>.
     */
    public final TableField<WebElementRecord, String> HREF = createField(DSL.name("href"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.alt</code>.
     */
    public final TableField<WebElementRecord, String> ALT = createField(DSL.name("alt"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.full_xpath</code>.
     */
    public final TableField<WebElementRecord, String> FULL_XPATH = createField(DSL.name("full_xpath"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>web_element.relative_xpath</code>.
     */
    public final TableField<WebElementRecord, String> RELATIVE_XPATH = createField(DSL.name("relative_xpath"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>web_element.inner_text</code>.
     */
    public final TableField<WebElementRecord, String> INNER_TEXT = createField(DSL.name("inner_text"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.location_x</code>.
     */
    public final TableField<WebElementRecord, Integer> LOCATION_X = createField(DSL.name("location_x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>web_element.location_y</code>.
     */
    public final TableField<WebElementRecord, Integer> LOCATION_Y = createField(DSL.name("location_y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>web_element.width</code>.
     */
    public final TableField<WebElementRecord, Integer> WIDTH = createField(DSL.name("width"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>web_element.height</code>.
     */
    public final TableField<WebElementRecord, Integer> HEIGHT = createField(DSL.name("height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>web_element.area</code>.
     */
    public final TableField<WebElementRecord, Integer> AREA = createField(DSL.name("area"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>web_element.shape</code>.
     */
    public final TableField<WebElementRecord, Float> SHAPE = createField(DSL.name("shape"), SQLDataType.REAL, this, "");

    /**
     * The column <code>web_element.is_button</code>.
     */
    public final TableField<WebElementRecord, Boolean> IS_BUTTON = createField(DSL.name("is_button"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>web_element.last_valid_type_selector</code>.
     */
    public final TableField<WebElementRecord, String> LAST_VALID_TYPE_SELECTOR = createField(DSL.name("last_valid_type_selector"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.last_valid_selector</code>.
     */
    public final TableField<WebElementRecord, String> LAST_VALID_SELECTOR = createField(DSL.name("last_valid_selector"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>web_element.element_screenshot_path</code>.
     */
    public final TableField<WebElementRecord, String> ELEMENT_SCREENSHOT_PATH = createField(DSL.name("element_screenshot_path"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>web_element.neighbor_elements</code>.
     */
    public final TableField<WebElementRecord, String> NEIGHBOR_ELEMENTS = createField(DSL.name("neighbor_elements"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>web_element.neighbor_elements_text</code>.
     */
    public final TableField<WebElementRecord, String> NEIGHBOR_ELEMENTS_TEXT = createField(DSL.name("neighbor_elements_text"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>web_element.dom_page_id</code>.
     */
    public final TableField<WebElementRecord, Integer> DOM_PAGE_ID = createField(DSL.name("dom_page_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private WebElement(Name alias, Table<WebElementRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WebElement(Name alias, Table<WebElementRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>web_element</code> table reference
     */
    public WebElement(String alias) {
        this(DSL.name(alias), WEB_ELEMENT);
    }

    /**
     * Create an aliased <code>web_element</code> table reference
     */
    public WebElement(Name alias) {
        this(alias, WEB_ELEMENT);
    }

    /**
     * Create a <code>web_element</code> table reference
     */
    public WebElement() {
        this(DSL.name("web_element"), null);
    }

    public <O extends Record> WebElement(Table<O> path, ForeignKey<O, WebElementRecord> childPath, InverseForeignKey<O, WebElementRecord> parentPath) {
        super(path, childPath, parentPath, WEB_ELEMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WebElementPath extends WebElement implements Path<WebElementRecord> {
        public <O extends Record> WebElementPath(Table<O> path, ForeignKey<O, WebElementRecord> childPath, InverseForeignKey<O, WebElementRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WebElementPath(Name alias, Table<WebElementRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WebElementPath as(String alias) {
            return new WebElementPath(DSL.name(alias), this);
        }

        @Override
        public WebElementPath as(Name alias) {
            return new WebElementPath(alias, this);
        }

        @Override
        public WebElementPath as(Table<?> alias) {
            return new WebElementPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<WebElementRecord> getPrimaryKey() {
        return Keys.WEB_ELEMENT__PK_WEB_ELEMENT;
    }

    @Override
    public List<ForeignKey<WebElementRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WEB_ELEMENT__FK_WEB_ELEMENT_PK_DOM_PAGE);
    }

    private transient DomPagePath _domPage;

    /**
     * Get the implicit join path to the <code>dom_page</code> table.
     */
    public DomPagePath domPage() {
        if (_domPage == null)
            _domPage = new DomPagePath(this, Keys.WEB_ELEMENT__FK_WEB_ELEMENT_PK_DOM_PAGE, null);

        return _domPage;
    }

    @Override
    public WebElement as(String alias) {
        return new WebElement(DSL.name(alias), this);
    }

    @Override
    public WebElement as(Name alias) {
        return new WebElement(alias, this);
    }

    @Override
    public WebElement as(Table<?> alias) {
        return new WebElement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WebElement rename(String name) {
        return new WebElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebElement rename(Name name) {
        return new WebElement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WebElement rename(Table<?> name) {
        return new WebElement(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WebElement where(Condition condition) {
        return new WebElement(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WebElement where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WebElement where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WebElement where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WebElement where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WebElement where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WebElement where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WebElement where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WebElement whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WebElement whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
